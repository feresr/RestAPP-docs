<!DOCTYPE html>
<html lang="es">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <title>@ViewBag.Title</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <meta name="viewport" content="width=device-width" />
    @Scripts.Render("~/bundles/modernizr")
    @Styles.Render("~/Content/bootstrap")
    @Styles.Render("~/Content/jquery")
    @Styles.Render("~/Content/lightbox")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/datatables")
    @Scripts.Render("~/bundles/lightbox")
    @RenderSection("scripts", required: false)
</head>
<body class="body-layout">
    <div class="container">
        @if (Request.IsAuthenticated)
        {   
            <text>
            @Html.Partial("HeaderPartial")
            @{Html.RenderPartial("MenuPartial");}
            </text>        
        }
    </div>
    <div class="container-fluid">
        @RenderSection("featured", required: false)
        @Html.Partial("_Notifications")
        <div class="animated fadeIn">
            @RenderBody()
        </div>
    </div>
    <script>
//        /* Set the defaults for DataTables initialisation */
//        $.extend(true, $.fn.dataTable.defaults, {
//            "sDom": "<'row-fluid'<'span6'l><'span6'p>r>t<'row-fluid'<'span6'i><'span6'p>>",
//            "sPaginationType": "bootstrap",
//            "oLanguage": {
//                "sLengthMenu": "_MENU_ records per page"
//            }
//        });

        /* Default class modification */
        $.extend($.fn.dataTableExt.oStdClasses, {
            "sWrapper": "dataTables_wrapper form-inline"
        });


        /* API method to get paging information */
        $.fn.dataTableExt.oApi.fnPagingInfo = function (oSettings) {
            return {
                "iStart": oSettings._iDisplayStart,
                "iEnd": oSettings.fnDisplayEnd(),
                "iLength": oSettings._iDisplayLength,
                "iTotal": oSettings.fnRecordsTotal(),
                "iFilteredTotal": oSettings.fnRecordsDisplay(),
                "iPage": Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength),
                "iTotalPages": Math.ceil(oSettings.fnRecordsDisplay() / oSettings._iDisplayLength)
            };
        };


        /* Bootstrap style pagination control */
        $.extend($.fn.dataTableExt.oPagination, {
            "bootstrap": {
                "fnInit": function (oSettings, nPaging, fnDraw) {
                    var oLang = oSettings.oLanguage.oPaginate;
                    var fnClickHandler = function (e) {
                        e.preventDefault();
                        if (oSettings.oApi._fnPageChange(oSettings, e.data.action)) {
                            fnDraw(oSettings);
                        }
                    };

                    $(nPaging).addClass('pagination').append(
				'<ul>' +
					'<li class="prev disabled"><a href="#">&larr; ' + oLang.sPrevious + '</a></li>' +
					'<li class="next disabled"><a href="#">' + oLang.sNext + ' &rarr; </a></li>' +
				'</ul>'
			);
                    var els = $('a', nPaging);
                    $(els[0]).bind('click.DT', { action: "previous" }, fnClickHandler);
                    $(els[1]).bind('click.DT', { action: "next" }, fnClickHandler);
                },

                "fnUpdate": function (oSettings, fnDraw) {
                    var iListLength = 5;
                    var oPaging = oSettings.oInstance.fnPagingInfo();
                    var an = oSettings.aanFeatures.p;
                    var i, j, sClass, iStart, iEnd, iHalf = Math.floor(iListLength / 2);

                    if (oPaging.iTotalPages < iListLength) {
                        iStart = 1;
                        iEnd = oPaging.iTotalPages;
                    }
                    else if (oPaging.iPage <= iHalf) {
                        iStart = 1;
                        iEnd = iListLength;
                    } else if (oPaging.iPage >= (oPaging.iTotalPages - iHalf)) {
                        iStart = oPaging.iTotalPages - iListLength + 1;
                        iEnd = oPaging.iTotalPages;
                    } else {
                        iStart = oPaging.iPage - iHalf + 1;
                        iEnd = iStart + iListLength - 1;
                    }

                    for (i = 0, iLen = an.length; i < iLen; i++) {
                        // Remove the middle elements
                        $('li:gt(0)', an[i]).filter(':not(:last)').remove();

                        // Add the new list items and their event handlers
                        for (j = iStart; j <= iEnd; j++) {
                            sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';
                            $('<li ' + sClass + '><a href="#">' + j + '</a></li>')
						.insertBefore($('li:last', an[i])[0])
						.bind('click', function (e) {
						    e.preventDefault();
						    oSettings._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;
						    fnDraw(oSettings);
						});
                        }

                        // Add / remove disabled classes from the static elements
                        if (oPaging.iPage === 0) {
                            $('li:first', an[i]).addClass('disabled');
                        } else {
                            $('li:first', an[i]).removeClass('disabled');
                        }

                        if (oPaging.iPage === oPaging.iTotalPages - 1 || oPaging.iTotalPages === 0) {
                            $('li:last', an[i]).addClass('disabled');
                        } else {
                            $('li:last', an[i]).removeClass('disabled');
                        }
                    }
                }
            }
        });


        /*
        * TableTools Bootstrap compatibility
        * Required TableTools 2.1+
        */
        if ($.fn.DataTable.TableTools) {
            // Set the classes that TableTools uses to something suitable for Bootstrap
            $.extend(true, $.fn.DataTable.TableTools.classes, {
                "container": "DTTT btn-group",
                "buttons": {
                    "normal": "btn",
                    "disabled": "disabled"
                },
                "collection": {
                    "container": "DTTT_dropdown dropdown-menu",
                    "buttons": {
                        "normal": "",
                        "disabled": "disabled"
                    }
                },
                "print": {
                    "info": "DTTT_print_info modal"
                },
                "select": {
                    "row": "active"
                }
            });

            // Have the collection use a bootstrap compatible dropdown
            $.extend(true, $.fn.DataTable.TableTools.DEFAULTS.oTags, {
                "collection": {
                    "container": "ul",
                    "button": "li",
                    "liner": "a"
                }
            });
        }


        /* Table initialisation */
        $(document).ready(function () {
            dataTableOption('#tableList');
        });

        function dataTableOption(table) {
            $(table).dataTable({
                "sDom": "<'row'<'span6'l><'span6'p>r>t<'row'<'span6'i><'span6'p>>",
                "sPaginationType": "bootstrap",
                "oLanguage": {
                    "sProcessing": '@T("View.Table.Processing").Text',
                    "sLengthMenu": '@T("View.Table.Length.LengthMenu").Text'.format('_MENU_'),
                    //                    "sZeroRecords": "No se encontraron resultados",
                    "sEmptyTable": '@T("View.Table.Length.EmptyTable").Text',
                    "sInfo": '@T("View.Table.Info.Info").Text'.format('_START_', '_END_', '_TOTAL_'),
                    "sInfoEmpty": '@T("View.Table.Info.InfoEmpty").Text',
                    //                    "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                    //                    "sInfoPostFix": "",
                    //                    "sSearch": "Buscar:",
                    //                    "sUrl": "",
                    //                    "sInfoThousands": ",",
                    "sLoadingRecords": '@T("View.Table.Info.LoadingRecords").Text',
                    "oPaginate": {
                        "sFirst": '@T("View.Table.Pagination.First").Text',
                        "sLast": '@T("View.Table.Pagination.Last").Text',
                        "sNext": '@T("View.Table.Pagination.Next").Text',
                        "sPrevious": '@T("View.Table.Pagination.Previous").Text'
                    },
                    "fnInfoCallback": null,
                    "oAria": {
                        "sSortAscending": ": Activar para ordernar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordernar la columna de manera descendente"
                    }
                }
            });
        }

        function dataTableOptionModal(table) {
            $(table).dataTable({
                "sDom": "<'row'<'span2'l><'span3'p>r>t<'row'<'span2'i><'span3'p>>",
                "sPaginationType": "bootstrap",
                "oLanguage": {
                    "sProcessing": '@T("View.Table.Processing").Text',
                    "sLengthMenu": '@T("View.Table.Length.LengthMenu").Text'.format('_MENU_'),
                    //                    "sZeroRecords": "No se encontraron resultados",
                    "sEmptyTable": '@T("View.Table.Length.EmptyTable").Text',
                    "sInfo": '@T("View.Table.Info.Info").Text'.format('_START_', '_END_', '_TOTAL_'),
                    "sInfoEmpty": '@T("View.Table.Info.InfoEmpty").Text',
                    //                    "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                    //                    "sInfoPostFix": "",
                    //                    "sSearch": "Buscar:",
                    //                    "sUrl": "",
                    //                    "sInfoThousands": ",",
                    "sLoadingRecords": '@T("View.Table.Info.LoadingRecords").Text',
                    "oPaginate": {
                        "sFirst": '@T("View.Table.Pagination.First").Text',
                        "sLast": '@T("View.Table.Pagination.Last").Text',
                        "sNext": '@T("View.Table.Pagination.Next").Text',
                        "sPrevious": '@T("View.Table.Pagination.Previous").Text'
                    },
                    "fnInfoCallback": null,
                    "oAria": {
                        "sSortAscending": ": Activar para ordernar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordernar la columna de manera descendente"
                    }
                }
            });
        }

        // Similar String.Format() to use replace eg: {1} this format
        String.prototype.format = function()
        {
           var content = this;
           for (var i=0; i < arguments.length; i++)
           {
                var replacement = '{' + i + '}';
                content = content.replace(replacement, arguments[i]);  
           }
           return content;
        };       
    </script>
</body>
</html>
